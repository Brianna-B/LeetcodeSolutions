//this problem required me to find the lowest common ancestor of a binary search tree with the given node definition.
//I made use of the way a binary search tree is sorted (by its definition) to create a recursive function 

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root->val>p->val && root->val>q->val){
            return lowestCommonAncestor(root->left, p, q);
        } else if(root->val<p->val && root->val<q->val){
            return lowestCommonAncestor(root->right, p, q);
        }else 
        return root;
        

}
};
